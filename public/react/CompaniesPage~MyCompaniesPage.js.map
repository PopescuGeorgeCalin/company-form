{"version":3,"sources":["webpack://vetrob2c.companies-my-account/./react/CompaniesPage.tsx","webpack://vetrob2c.companies-my-account/./react/components/CompaniesListItem/CompaniesListItem.tsx","webpack://vetrob2c.companies-my-account/./react/components/CompaniesListItem/index.tsx","webpack://vetrob2c.companies-my-account/./react/components/CompaniesPage/CompaniesPage.tsx","webpack://vetrob2c.companies-my-account/./react/components/CompaniesPage/index.tsx","webpack://vetrob2c.companies-my-account/./react/helpers/index.tsx","webpack://vetrob2c.companies-my-account/./react/hooks/useCompaniesQuery.tsx","webpack://vetrob2c.companies-my-account/./react/hooks/useCompaniesRelationshipsQuery.tsx","webpack://vetrob2c.companies-my-account/./react/queries/Companies.graphql","webpack://vetrob2c.companies-my-account/./react/queries/CompaniesRelationships.graphql"],"names":[],"mappings":"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","file":"CompaniesPage~MyCompaniesPage.js","sourcesContent":["export { default } from './components/CompaniesPage'\n","import React, { useEffect, useState } from 'react'\n\nimport { documentToProfile } from '../../helpers'\nimport { useCompaniesQuery } from '../../hooks/useCompaniesQuery'\n\ninterface CompaniesListItemProps {\n  companyCIF: string\n}\n\ntype Props = CompaniesListItemProps\n\nconst CompaniesListItem = (props: Props) => {\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n\n  const { companyCIF } = props\n\n  const companiesQuery = useCompaniesQuery({\n    variables: {\n      where: `companyCIF=*${companyCIF.replace(/RO/gi, '').trim()}*`,\n    },\n  })\n\n  useEffect(() => {\n    if (companiesQuery.loading) {\n      setIsLoading(true)\n    } else {\n      setIsLoading(false)\n    }\n  }, [companiesQuery])\n\n  if (isLoading) return <></>\n\n  return (\n    <div>\n      {companiesQuery.data?.documents.map((document, index) => {\n        const companie = documentToProfile(document)\n\n        return (\n          <div key={index} className=\"mb3\">\n            {companie.companyName}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CompaniesListItem\n","import CompaniesListItem from './CompaniesListItem'\n\nexport default CompaniesListItem\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport React, { useEffect, useState } from 'react'\nimport {\n  // @ts-ignore\n  ContentWrapper,\n  // @ts-ignore\n  BaseLoading,\n  SkeletonBox,\n} from 'vtex.my-account-commons'\n// @ts-ignore\nimport { EmptyState } from 'vtex.styleguide'\n\nimport { documentToProfile } from '../../helpers'\nimport { useCompaniesRelationshipsQuery } from '../../hooks/useCompaniesRelationshipsQuery'\nimport CompaniesListItem from '../CompaniesListItem'\n\nconst headerConfig = {\n  titleId: 'store/my-companies.page',\n}\n\nconst CompaniesPage = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const [email, setEmail] = useState<string>('')\n\n  const companiesQuery = useCompaniesRelationshipsQuery({\n    variables: {\n      where: `clientEmail=${email}`,\n    },\n  })\n\n  useEffect(() => {\n    if (companiesQuery.loading) {\n      setIsLoading(true)\n    } else {\n      setIsLoading(false)\n    }\n  }, [companiesQuery, email])\n\n  useEffect(() => {\n    fetch('/no-cache/profileSystem/getProfile')\n      .then((response) => response.json())\n      .then(async (response) => {\n        if (response.IsUserDefined) {\n          setEmail(response.Email)\n        }\n      })\n  }, [email])\n\n  if (isLoading)\n    return (\n      <BaseLoading queryData={companiesQuery} headerConfig={headerConfig}>\n        <SkeletonBox shouldAllowGrowing />\n      </BaseLoading>\n    )\n\n  return (\n    <ContentWrapper {...headerConfig}>\n      {() =>\n        companiesQuery.data?.documents.length ? (\n          companiesQuery.data?.documents.map((document, index) => {\n            const companies = documentToProfile(document)\n\n            return (\n              <CompaniesListItem\n                companyCIF={companies.companyCIF}\n                key={index}\n              />\n            )\n          })\n        ) : (\n          <EmptyState title=\"Oops.\">\n            <p>\n              Sorry. We couldn't find any companies associated with your user.\n            </p>\n          </EmptyState>\n        )\n      }\n    </ContentWrapper>\n  )\n}\n\nexport default CompaniesPage\n","import CompaniesPage from './CompaniesPage'\n\nexport default CompaniesPage\n","import { Document } from '../typings/masterdata'\n\ninterface Profile extends Record<string, string> {\n  id: string\n  name: string\n  email: string\n}\n\nexport const normalizeCustomFields = (fields: Array<Record<string, string>>) =>\n  fields.reduce<Record<string, string>>((prev, curr) => {\n    const { key, value } = curr\n\n    return { ...prev, [key]: value }\n  }, {})\n\nexport const documentToProfile = (document: Document): Profile => {\n  const { fields, id } = document\n\n  const normalizedFields = fields.reduce<Record<string, string>>(\n    (prev, curr) => {\n      const { key, value } = curr\n\n      return { ...prev, [key]: value }\n    },\n    {}\n  )\n\n  const { firstName, lastName, email } = normalizedFields\n  const name = [firstName, lastName].filter((item) => item).join(' ')\n\n  return { id, name, email, ...normalizedFields }\n}\n","import { QueryHookOptions, useQuery } from 'react-apollo'\n\nimport GET_COMPANIES from '../queries/Companies.graphql'\n\nexport interface Data {\n  documents: Document[]\n}\n\nexport interface Document {\n  id: string\n  fields: Field[]\n}\n\nexport interface Field {\n  key: string\n  value: string\n}\n\nexport const useCompaniesQuery = (options: QueryHookOptions) =>\n  useQuery<Data>(GET_COMPANIES, options)\n","import { QueryHookOptions, useQuery } from 'react-apollo'\n\nimport GET_COMPANIES_RELATIONSHIPS from '../queries/CompaniesRelationships.graphql'\n\nexport interface Data {\n  documents: Document[]\n}\n\nexport interface Document {\n  id: string\n  fields: Field[]\n}\n\nexport interface Field {\n  key: string\n  value: string\n}\n\nexport const useCompaniesRelationshipsQuery = (options: QueryHookOptions) =>\n  useQuery<Data>(GET_COMPANIES_RELATIONSHIPS, options)\n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"Companies\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"where\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"context\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"scope\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"private\",\"block\":false}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"sender\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"vetrob2c.companies-my-account@0.0.1\",\"block\":false}}]}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"documents\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"acronym\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"MC\",\"block\":false}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"where\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"where\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"fields\"},\"value\":{\"kind\":\"ListValue\",\"values\":[{\"kind\":\"StringValue\",\"value\":\"companyName\",\"block\":false},{\"kind\":\"StringValue\",\"value\":\"companyCIF\",\"block\":false}]}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"schema\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"healthmp-caregivers\",\"block\":false}}],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"context\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"provider\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"vtex.store-graphql\",\"block\":false}}]},{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"runtimeMeta\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"hash\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"c23973f1992c92bb31d26d37b5323866c804e1682e7428e313ba34992be94aec\",\"block\":false}}]}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"cacheId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"fields\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":448}};\n    doc.loc.source = {\"body\":\"query Companies($where: String) @context(scope: \\\"private\\\", sender: \\\"vetrob2c.companies-my-account@0.0.1\\\") {\\n  documents(acronym: \\\"MC\\\", where: $where, fields: [\\\"companyName\\\", \\\"companyCIF\\\"], schema: \\\"healthmp-caregivers\\\") @context(provider: \\\"vtex.store-graphql\\\") @runtimeMeta(hash: \\\"c23973f1992c92bb31d26d37b5323866c804e1682e7428e313ba34992be94aec\\\") {\\n    cacheId\\n    id\\n    fields {\\n      key\\n      value\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"Companies\"] = oneQuery(doc, \"Companies\");\n        \n","\n    var doc = {\"kind\":\"Document\",\"definitions\":[{\"kind\":\"OperationDefinition\",\"operation\":\"query\",\"name\":{\"kind\":\"Name\",\"value\":\"CompaniesRelationships\"},\"variableDefinitions\":[{\"kind\":\"VariableDefinition\",\"variable\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"where\"}},\"type\":{\"kind\":\"NamedType\",\"name\":{\"kind\":\"Name\",\"value\":\"String\"}},\"directives\":[]}],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"context\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"scope\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"private\",\"block\":false}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"sender\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"vetrob2c.companies-my-account@0.0.1\",\"block\":false}}]}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"documents\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"acronym\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"RC\",\"block\":false}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"where\"},\"value\":{\"kind\":\"Variable\",\"name\":{\"kind\":\"Name\",\"value\":\"where\"}}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"fields\"},\"value\":{\"kind\":\"ListValue\",\"values\":[{\"kind\":\"StringValue\",\"value\":\"clientEmail\",\"block\":false},{\"kind\":\"StringValue\",\"value\":\"companyCIF\",\"block\":false}]}},{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"schema\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"healthmp-caregivers\",\"block\":false}}],\"directives\":[{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"context\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"provider\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"vtex.store-graphql\",\"block\":false}}]},{\"kind\":\"Directive\",\"name\":{\"kind\":\"Name\",\"value\":\"runtimeMeta\"},\"arguments\":[{\"kind\":\"Argument\",\"name\":{\"kind\":\"Name\",\"value\":\"hash\"},\"value\":{\"kind\":\"StringValue\",\"value\":\"aa41257d8809932cf3488b556d74b3f2027472f383b2a933139050ae39f1a8c6\",\"block\":false}}]}],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"cacheId\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"id\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"fields\"},\"arguments\":[],\"directives\":[],\"selectionSet\":{\"kind\":\"SelectionSet\",\"selections\":[{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"key\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"value\"},\"arguments\":[],\"directives\":[]},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[]}]}},{\"kind\":\"Field\",\"name\":{\"kind\":\"Name\",\"value\":\"__typename\"},\"arguments\":[],\"directives\":[]}]}}]}}],\"loc\":{\"start\":0,\"end\":461}};\n    doc.loc.source = {\"body\":\"query CompaniesRelationships($where: String) @context(scope: \\\"private\\\", sender: \\\"vetrob2c.companies-my-account@0.0.1\\\") {\\n  documents(acronym: \\\"RC\\\", where: $where, fields: [\\\"clientEmail\\\", \\\"companyCIF\\\"], schema: \\\"healthmp-caregivers\\\") @context(provider: \\\"vtex.store-graphql\\\") @runtimeMeta(hash: \\\"aa41257d8809932cf3488b556d74b3f2027472f383b2a933139050ae39f1a8c6\\\") {\\n    cacheId\\n    id\\n    fields {\\n      key\\n      value\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\",\"name\":\"GraphQL request\",\"locationOffset\":{\"line\":1,\"column\":1}};\n  \n\n    var names = {};\n    function unique(defs) {\n      return defs.filter(\n        function(def) {\n          if (def.kind !== 'FragmentDefinition') return true;\n          var name = def.name.value\n          if (names[name]) {\n            return false;\n          } else {\n            names[name] = true;\n            return true;\n          }\n        }\n      )\n    }\n  \n\n    // Collect any fragment/type references from a node, adding them to the refs Set\n    function collectFragmentReferences(node, refs) {\n      if (node.kind === \"FragmentSpread\") {\n        refs.add(node.name.value);\n      } else if (node.kind === \"VariableDefinition\") {\n        var type = node.type;\n        if (type.kind === \"NamedType\") {\n          refs.add(type.name.value);\n        }\n      }\n\n      if (node.selectionSet) {\n        node.selectionSet.selections.forEach(function(selection) {\n          collectFragmentReferences(selection, refs);\n        });\n      }\n\n      if (node.variableDefinitions) {\n        node.variableDefinitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n\n      if (node.definitions) {\n        node.definitions.forEach(function(def) {\n          collectFragmentReferences(def, refs);\n        });\n      }\n    }\n\n    var definitionRefs = {};\n    (function extractReferences() {\n      doc.definitions.forEach(function(def) {\n        if (def.name) {\n          var refs = new Set();\n          collectFragmentReferences(def, refs);\n          definitionRefs[def.name.value] = refs;\n        }\n      });\n    })();\n\n    function findOperation(doc, name) {\n      for (var i = 0; i < doc.definitions.length; i++) {\n        var element = doc.definitions[i];\n        if (element.name && element.name.value == name) {\n          return element;\n        }\n      }\n    }\n\n    function oneQuery(doc, operationName) {\n      // Copy the DocumentNode, but clear out the definitions\n      var newDoc = {\n        kind: doc.kind,\n        definitions: [findOperation(doc, operationName)]\n      };\n      if (doc.hasOwnProperty(\"loc\")) {\n        newDoc.loc = doc.loc;\n      }\n\n      // Now, for the operation we're running, find any fragments referenced by\n      // it or the fragments it references\n      var opRefs = definitionRefs[operationName] || new Set();\n      var allRefs = new Set();\n      var newRefs = new Set();\n\n      // IE 11 doesn't support \"new Set(iterable)\", so we add the members of opRefs to newRefs one by one\n      opRefs.forEach(function(refName) {\n        newRefs.add(refName);\n      });\n\n      while (newRefs.size > 0) {\n        var prevRefs = newRefs;\n        newRefs = new Set();\n\n        prevRefs.forEach(function(refName) {\n          if (!allRefs.has(refName)) {\n            allRefs.add(refName);\n            var childRefs = definitionRefs[refName] || new Set();\n            childRefs.forEach(function(childRef) {\n              newRefs.add(childRef);\n            });\n          }\n        });\n      }\n\n      allRefs.forEach(function(refName) {\n        var op = findOperation(doc, refName);\n        if (op) {\n          newDoc.definitions.push(op);\n        }\n      });\n\n      return newDoc;\n    }\n\n    module.exports = doc;\n    \n        module.exports[\"CompaniesRelationships\"] = oneQuery(doc, \"CompaniesRelationships\");\n        \n"],"sourceRoot":""}